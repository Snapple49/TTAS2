{-
TorXakis - Model Based Testing
Copyright (c) 2015-2016 TNO and Radboud University
See license.txt
-}

-- ----------------------------------------------------- --

CHANDEF  Chans  
    ::=  
        Out :: String;
        In  :: String
ENDDEF

-- ----------------------------------------------------- --

TYPEDEF  Cmd  
    ::=  
        Signon |
		Signoff |
		Open |
		Artreg {artid :: Int; artamount :: Int} |
		Close |
		Trans {method :: String} |
		Idle
ENDDEF

-- ----------------------------------------------------- --
{-
TYPEDEF  Resp  
    ::=  
        success {code :: String} |
		failure {code :: String}		
ENDDEF

-- ----
PROCDEF open [In :: String; Out :: String] ()
    ::=
        In ! "open\n" >-> Out ? x >-> close[In, Out]()
ENDDEF

-- ----------------------------------------------------- --

PROCDEF close [In :: String; Out :: String] ()
    ::=
        In ! "close\n" >-> Out ? x >-> trans[In, Out]()
ENDDEF

-- ----------------------------------------------------- --

PROCDEF trans [In :: String; Out :: String] ()
    ::=
        In ! "trans tm_cash\n" >-> Out ? x >-> idle[In, Out]()
ENDDEF

-- ----------------------------------------------------- --

PROCDEF idle [In :: String; Out :: String] ()
    ::=
        In ! "idle\n" >-> Out ? x >-> yo[In, Out]()
ENDDEF

-- ----------------------------------------------------- --

PROCDEF yo [In :: String; Out :: String] ()
    ::=
        get[In, Out]() 
        ##
        open[In, Out]()
        
ENDDEF

-- ----------------------------------------------------- --

PROCDEF get [In :: String; Out :: String] ()
    ::=
        In ! "get cs_accnt\n" >-> Out ? x >-> yo[In, Out]()
ENDDEF

-- ----------------------------------------------------- --

PROCDEF signOn [In :: String; Out :: String] ()
    ::=
        Out ? x >-> In ! "signon 8:01\n" >-> Out ! "251 Signed On" >-> open[In, Out]()
ENDDEF
-}
-- ----------------------------------------------------- --

FUNCDEF cmdToString (c :: Cmd) :: String
	::=
		IF isSignon(c) THEN "signon 8:01\n" ELSE
			IF isSignoff(c) THEN "signoff\n" ELSE
				IF isOpen(c) THEN "open\n" ELSE
					IF isArtreg(c) THEN "artreg " ++ toString(artid(c)) ++ ":" ++ toString(artamount(c)) ++ "\n" ELSE
						IF isClose(c) THEN "close\n" ELSE
							IF isTrans(c) THEN "trans " ++ method(c) ++ "\n" ELSE
								IF isIdle(c) THEN "idle\n" ELSE ""
							FI
						FI
					FI
				FI
			FI
		FI	
	FI
ENDDEF

-- ----------------------------------------------------- --

STAUTDEF scanflowserver [ In :: String; Out :: String ] ( )
    ::= 
        STATE GREETING, NOT_SIGNED, SIGNING_IN, AS_IDLE, OPENING, AS_OPEN, REGISTERING, CLOSING, AS_CLOSED, SIGNING_OUT, AS_TRANSING, AS_ENDING, IDLING
        

        INIT GREETING {}
		
        TRANS 	GREETING -> Out ? x -> NOT_SIGNED
				NOT_SIGNED -> In ! cmdToString(Signon) -> SIGNING_IN
				SIGNING_IN -> Out ? x -> AS_IDLE
				AS_IDLE -> In ! cmdToString(Open) -> OPENING
				OPENING -> Out ? x -> AS_OPEN
				AS_OPEN -> In ! cmdToString(Artreg(59922827, 1)) -> REGISTERING
				REGISTERING -> Out ? x -> AS_OPEN
				AS_OPEN -> In ! cmdToString(Close) -> CLOSING
				CLOSING -> Out ? x -> AS_CLOSED
				
				
				
				--SIGNING_IN -> Out ? Success :: Resp -> AS_IDLE
				
                
ENDDEF  

-- ----------------------------------------------------- --

MODELDEF  Mod
 ::=
     CHAN IN    In
     CHAN OUT   Out

     BEHAVIOUR  
              scanflowserver [In, Out] ()
ENDDEF

-- ----------------------------------------------------- --

CNECTDEF  Sut
 ::=
     CLIENTSOCK

     CHAN OUT  In          HOST "sid.cs.ru.nl"  PORT 25999
     ENCODE    In ? cmd      ->  !  cmd

     CHAN IN   Out          HOST "sid.cs.ru.nl"  PORT 25999
     DECODE   Out ! s   <-   ? s
ENDDEF

-- ----------------------------------------------------- --

