{-
TorXakis - Model Based Testing
Copyright (c) 2015-2016 TNO and Radboud University
See license.txt
-}

-- ----------------------------------------------------- --

CHANDEF  Chans  
    ::=  
        Out :: Response;
        In  :: Command
ENDDEF

-- ----------------------------------------------------- --

TYPEDEF  Command  
    ::=  
        SignOn 		{sfu :: Int; password :: String}		|
		SignOff |
		Open |
		Artreg {artid :: Article; artAmount :: Int} |
		Close |
		Trans {method :: String} |
		Idle	|
		GetVar {variable :: CRVar}
ENDDEF

-- ----------------------------------------------------- --

TYPEDEF  Response  
    ::=  
	
		-- Ok
		ResumedOperation				|
		CashRegisterRestored		|
		CRVariable						|
		ArtDescription1					|
		AccountBalance					|
		ArtDescription2					|
		Weight								|
		ServiceReady					|
		ServiceTerminating			|
		AccountClosed					|
		AccountOpened					|
		ArtRegistered					|
		AccountIdled						|
		TransactionSucceeded		|
		SignedOff							|
		SignedOn							|
		DataPrinted						|
		HTLMText							|
		
		-- Again
		SigningRejected					|
		
		-- Fail
        UnknownCommand 			|
		SyntaxError						|
		CommandFailed					|
		ErrorState							|
		WeighingNotAvailable			|
		NoSuchVariable					|	
		NoSuchArticle					|
		NoStableWeight					|
		NoSuchAccount					|
		InValidAccountState			|
		NoSuchTransactionMethod	|
		BusyTransacting				|
		TransactionFailed  				|
		NotSignedOn						|
		AuthenticationFailed			|
		CRPrintingInactive				|
		SFUPrintingInactive			|
		Others								
ENDDEF

-- ----------------------------------------------------- --

TYPEDEF  State 
	::=
		S_Not_Signed    |
		S_As_Idle    		|
		S_As_Opened    |
		S_As_Closed 	|
		S_As_Ending 
ENDDEF

-- ----------------------------------------------------- --

TYPEDEF  CRVar
	::=
		SI_MODEL			|
		SI_SOFTW			|
		SI_SCRP			|
		SI_SYSID			|
		LC_CNTRY			|
		LC_CURCY		|
		LC_SEPCH			|
		LC_FRACT			|
		LC_WEIGHT		|
		TC_BANK			|
		TC_BANK2		|
		TC_CASH			|
		TC_STORE		|
		TC_FLUSH			|
		PC_CR				|
		PC_SFU				|
		MS_SRBC			|
		MS_BCPFX		|
		CS_EVENT			|
		CS_SIGN			|
		CS_ACCNT		|
		AI_STAMP			|
		Invalid
ENDDEF

-- ----------------------------------------------------- --

TYPEDEF  Article 
	::=
		Valid1    |
		Valid2    |
		Valid3    |
		Invalid1 |
		Invalid2 
ENDDEF

-- ----------------------------------------------------- --

FUNCDEF isValidVariable (v :: CRVar) :: Bool
	::=
		isSI_MODEL(v) 		\/
		isSI_SOFTW(v) 		\/	
		isSI_SCRP(v) 		\/
		isSI_SYSID(v) 		\/
		isLC_CNTRY(v) 		\/
		isLC_CURCY(v) 		\/
		isLC_SEPCH(v) 		\/
		isLC_FRACT(v) 		\/
		isLC_WEIGHT(v)	\/
		isTC_BANK(v) 		\/
		isTC_BANK2(v) 		\/
		isTC_CASH(v) 		\/
		isTC_STORE(v) 		\/
		isTC_FLUSH(v) 		\/
		isPC_CR(v) 			\/
		isPC_SFU(v)			\/
		isMS_SRBC(v) 		\/
		isMS_BCPFX(v) 		\/
		isCS_EVENT(v) 		\/
		isCS_SIGN(v) 		\/
		isCS_ACCNT(v) 	\/
		isAI_STAMP(v) 
		
ENDDEF
-- ----------------------------------------------------- --

FUNCDEF isValidArt (a :: Article) :: Bool
	::=
		isValid1(a)  \/ isValid2(a) \/ isValid3(a)
ENDDEF

-- ----------------------------------------------------- --

FUNCDEF isValidSignOn (c :: Command) :: Bool
	::=
		isSignOn(c) /\ (sfu(c) == 8) /\ (password(c) == "01")
ENDDEF

-- ----------------------------------------------------- --

FUNCDEF isInvalidSignOn (c :: Command) :: Bool
	::=
		(isSignOn(c)) /\ (not(isValidSignOn(c))) /\ (sfu(c) >= 0) /\ (password(c) == "111")
ENDDEF

-- ----------------------------------------------------- --

FUNCDEF getArtID (a :: Article) :: String
	::=
		IF isValid1(a) THEN "59922827" ELSE
		IF isValid2(a) THEN "20013226"  ELSE	
		IF isValid3(a) THEN "5998386301215" ELSE
		IF isInvalid1(a) THEN "22"  ELSE 
		IF isInvalid2(a) THEN "0" ELSE
		"-1"
		FI FI FI FI FI
				
ENDDEF
-- ----------------------------------------------------- --

FUNCDEF cmdToString (c :: Command) :: String
	::=
		IF isSignOn(c) THEN "signon " ++ toString(sfu(c)) ++ ":"  ++ password(c) ++ "\n" ELSE
			IF isSignOff(c) THEN "signoff\n" ELSE
				IF isOpen(c) THEN "open\n" ELSE
					IF isArtreg(c) THEN "artreg " ++ getArtID(artid(c)) ++ ":" ++ toString(artAmount(c)) ++ "\n" ELSE
						IF isClose(c) THEN "close\n" ELSE
							IF isTrans(c) THEN "trans " ++ method(c) ++ "\n" ELSE
								IF isGetVar(c) THEN "get " ++ crVarToString(variable(c)) ++ "\n" ELSE
									IF isIdle(c) THEN "idle\n" ELSE ""
									FI
								FI
							FI
						FI
					FI
				FI
			FI	
		FI
ENDDEF

-- ----------------------------------------------------- --

FUNCDEF crVarToString (v :: CRVar) :: String
	::=
		IF isSI_MODEL(v) THEN "SI_MODEL" ELSE
		IF isSI_SOFTW(v)  THEN "SI_SOFTW" ELSE
		IF isSI_SCRP(v)  THEN "SI_SCRP" ELSE
		IF isSI_SYSID(v)  THEN "SI_SYSID" ELSE
		IF isLC_CNTRY(v)  THEN "LC_CNTRY" ELSE
		IF isLC_CURCY(v)  THEN "LC_CURCY" ELSE
		IF isLC_SEPCH(v)  THEN "LC_SEPCH" ELSE
		IF isLC_FRACT(v)  THEN "LC_FRACT" ELSE
		IF isLC_WEIGHT(v)  THEN "LC_WEIGHT" ELSE
		IF isTC_BANK(v) THEN "TC_BANK" ELSE
		IF isTC_BANK2(v)  THEN "TC_BANK2" ELSE
		IF isTC_CASH(v)  THEN "TC_CASH" ELSE
		IF isTC_STORE(v)  THEN "TC_STORE" ELSE
		IF isTC_FLUSH(v)  THEN "TC_FLUSH" ELSE
		IF isPC_CR(v)  THEN "PC_CR" ELSE
		IF isPC_SFU(v)  THEN "PC_SFU" ELSE
		IF isMS_SRBC(v)  THEN "MS_SRBC" ELSE
		IF isMS_BCPFX(v)  THEN "MS_BCPFX" ELSE
		IF isCS_EVENT(v)  THEN "CS_EVENT" ELSE
		IF isCS_SIGN(v) THEN "CS_SIGN" ELSE
		IF isCS_ACCNT(v)  THEN "CS_ACCNT" ELSE 
		IF isAI_STAMP(v) THEN "AI_STAMP" ELSE
		"INVALID_VAR"
		FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI
ENDDEF

-- ----------------------------------------------------- --

FUNCDEF stringToResponse(s :: String) :: Response
	::=
		-- Ok
		IF strinre (s, REGEX('201 .*')) THEN  ResumedOperation 				ELSE
		IF strinre (s, REGEX('202 .*')) THEN  CashRegisterRestored 			ELSE
		IF strinre (s, REGEX('210 .*')) THEN  CRVariable 							ELSE
		IF strinre (s, REGEX('211 .*')) THEN  ArtDescription1 					ELSE
		IF strinre (s, REGEX('212 .*')) THEN  AccountBalance 					ELSE
		IF strinre (s, REGEX('213 .*')) THEN  ArtDescription2 					ELSE
		IF strinre (s, REGEX('214 .*')) THEN  Weight 								ELSE
		IF strinre (s, REGEX('220 .*')) THEN  ServiceReady 						ELSE
		IF strinre (s, REGEX('221 .*')) THEN  ServiceTerminating 				ELSE
		IF strinre (s, REGEX('230 .*')) THEN  AccountClosed 						ELSE
		IF strinre (s, REGEX('231 .*')) THEN  AccountOpened 					ELSE
		IF strinre (s, REGEX('232 .*')) THEN  ArtRegistered 						ELSE
		IF strinre (s, REGEX('233 .*')) THEN  AccountIdled 						ELSE
		IF strinre (s, REGEX('240 .*')) THEN  TransactionSucceeded 			ELSE
		IF strinre (s, REGEX('250 .*')) THEN  SignedOff 							ELSE
		IF strinre (s, REGEX('251 .*')) THEN  SignedOn 							ELSE
		IF strinre (s, REGEX('260 .*')) THEN  DataPrinted 							ELSE
		IF strinre (s, REGEX('261 .*')) THEN  HTLMText 							ELSE
		
		-- Again
		IF strinre (s, REGEX('450 .*')) THEN  SigningRejected 					ELSE

		-- Fail
		IF strinre (s, REGEX('500 .*')) THEN  UnknownCommand 				ELSE
		IF strinre (s, REGEX('501 .*')) THEN  SyntaxError 						ELSE
		IF strinre (s, REGEX('502 .*')) THEN  CommandFailed 					ELSE
		IF strinre (s, REGEX('503 .*')) THEN  ErrorState 							ELSE
		IF strinre (s, REGEX('504 .*')) THEN  WeighingNotAvailable 			ELSE
		IF strinre (s, REGEX('510 .*')) THEN  NoSuchVariable					ELSE
		IF strinre (s, REGEX('511 .*')) THEN  NoSuchArticle 						ELSE
		IF strinre (s, REGEX('512 .*')) THEN  NoStableWeight					ELSE
		IF strinre (s, REGEX('530 .*')) THEN  NoSuchAccount						ELSE
		IF strinre (s, REGEX('531 .*')) THEN  InValidAccountState				ELSE
		IF strinre (s, REGEX('540 .*')) THEN  NoSuchTransactionMethod		ELSE
		IF strinre (s, REGEX('541 .*')) THEN  BusyTransacting 					ELSE
		IF strinre (s, REGEX('542 .*')) THEN  TransactionFailed 					ELSE
		IF strinre (s, REGEX('550 .*')) THEN  NotSignedOn 						ELSE
		IF strinre (s, REGEX('551 .*')) THEN  AuthenticationFailed				ELSE
		IF strinre (s, REGEX('560 .*')) THEN  CRPrintingInactive 				ELSE
		IF strinre (s, REGEX('561 .*')) THEN  SFUPrintingInactive 				ELSE
		Others 
		FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI FI
		
ENDDEF
-- ----------------------------------------------------- --

PROCDEF  Greeting  [ Cmd :: Command;  Resp :: Response ] ( )
    ::=
			Resp ? x >-> Not_Signed[Cmd, Resp](S_Not_Signed)
ENDDEF

-- ----------------------------------------------------- --

PROCDEF  Not_Signed  [ Cmd :: Command;  Resp :: Response ] ( s :: State)
    ::=
			Cmd ? cmd [[isSignOn(cmd), isValidSignOn(cmd), isS_Not_Signed(s)]]  >-> Resp ! SignedOn >-> Acc_Idle[Cmd, Resp]()
			##
			Cmd ? cmd [[isSignOn(cmd), isValidSignOn(cmd), isS_As_Idle(s)]]  >-> Resp ! SignedOn >-> Acc_Idle[Cmd, Resp]()
			##
			Cmd ? cmd [[isSignOn(cmd), isValidSignOn(cmd), isS_As_Opened(s)]]  >-> Resp ! SignedOn >-> Acc_Opened[Cmd, Resp]()
			##
			Cmd ? cmd [[isSignOn(cmd), isValidSignOn(cmd), isS_As_Closed(s)]]  >-> Resp ! SignedOn >-> Acc_Closed[Cmd, Resp]()
			##
			Cmd ? cmd [[isSignOn(cmd), isValidSignOn(cmd), isS_As_Ending(s)]]  >-> Resp ! SignedOn >-> Acc_Ending[Cmd, Resp]()
			##
			Cmd ? cmd [[isInvalidSignOn(cmd)]]  >-> Resp ! AuthenticationFailed >-> Not_Signed[Cmd, Resp](s)
			##
			Cmd ! SignOff >-> Resp ! NotSignedOn >-> Not_Signed[Cmd, Resp](s)
ENDDEF

-- ----------------------------------------------------- --

PROCDEF  Acc_Idle  [ Cmd :: Command;  Resp :: Response ] ( )
    ::=
			Cmd ! Open >-> Resp ! AccountOpened >-> Acc_Opened[Cmd, Resp]()
			## 
			Get_Var[Cmd, Resp] (S_As_Idle)
			##
			Cmd ! SignOff >-> Resp ! SignedOff >-> Not_Signed[Cmd, Resp](S_As_Idle)
ENDDEF

-- ----------------------------------------------------- --

PROCDEF  Acc_Opened  [ Cmd :: Command;  Resp :: Response ] ( )
    ::=
			(Cmd ? cmd [[isArtreg(cmd), isValidArt(artid(cmd)) , artAmount(cmd) > 0]] >-> Resp ! AccountBalance >-> Resp ! ArtRegistered    >-> Acc_Opened[Cmd, Resp]()
			##
			Cmd ? cmd [[isArtreg(cmd), not(isValidArt(artid(cmd))), artAmount(cmd) > 0]] >-> Resp ! NoSuchArticle >-> Acc_Opened[Cmd, Resp]())
			##
			Cmd ! Close >-> Resp ! AccountClosed >-> Acc_Closed[Cmd, Resp]()
			## 
			Get_Var[Cmd, Resp] (S_As_Opened)
			##
			Cmd ! SignOff >-> Resp ! SignedOff >-> Not_Signed[Cmd, Resp](S_As_Opened)
ENDDEF

-- ----------------------------------------------------- --

PROCDEF  Acc_Closed  [ Cmd :: Command;  Resp :: Response ] ( )
    ::=
			Cmd ! Trans("TM_CASH") >-> Resp ! TransactionSucceeded >-> Acc_Ending[Cmd, Resp]()
			## 
			Get_Var[Cmd, Resp] (S_As_Closed)
			##
			Cmd ! SignOff >-> Resp ! SignedOff >-> Not_Signed[Cmd, Resp](S_As_Closed)
ENDDEF

-- ----------------------------------------------------- --

PROCDEF  Acc_Ending  [ Cmd :: Command;  Resp :: Response ] ( )
    ::=
			Cmd ! Idle >-> Resp ! AccountIdled >-> Acc_Idle[Cmd, Resp]()
			## 
			Get_Var[Cmd, Resp] (S_As_Ending)
			##
			Cmd ! SignOff >-> Resp ! SignedOff >-> Not_Signed[Cmd, Resp](S_As_Ending)
ENDDEF

-- ----------------------------------------------------- --

PROCDEF  Get_Var [ Cmd :: Command;  Resp :: Response ] (s :: State)
    ::=
			Cmd ? cmd [[isGetVar(cmd), isValidVariable(variable(cmd)), isS_Not_Signed(s)]] >-> Resp ! CRVariable  >-> Not_Signed[Cmd, Resp](S_Not_Signed)
			##
			Cmd ? cmd [[isGetVar(cmd), isValidVariable(variable(cmd)), isS_As_Idle(s)]] >-> Resp ! CRVariable  >-> Acc_Idle[Cmd, Resp]()
			##
			Cmd ? cmd [[isGetVar(cmd), isValidVariable(variable(cmd)), isS_As_Opened(s)]] >-> Resp ! CRVariable  >-> Acc_Opened[Cmd, Resp]()
			##
			Cmd ? cmd [[isGetVar(cmd), isValidVariable(variable(cmd)), isS_As_Closed(s)]] >-> Resp ! CRVariable  >-> Acc_Closed[Cmd, Resp]()
			##
			Cmd ? cmd [[isGetVar(cmd), isValidVariable(variable(cmd)), isS_As_Ending(s)]] >-> Resp ! CRVariable  >-> Acc_Ending[Cmd, Resp]()
			##
			Cmd ? cmd [[isGetVar(cmd), not(isValidVariable(variable(cmd))), isS_Not_Signed(s)]] >-> Resp ! NoSuchVariable  >-> Not_Signed[Cmd, Resp](S_Not_Signed)
			##
			Cmd ? cmd [[isGetVar(cmd), not(isValidVariable(variable(cmd))), isS_As_Idle(s)]] >-> Resp ! NoSuchVariable  >-> Acc_Idle[Cmd, Resp]()
			##
			Cmd ? cmd [[isGetVar(cmd), not(isValidVariable(variable(cmd))), isS_As_Opened(s)]] >-> Resp ! NoSuchVariable  >-> Acc_Opened[Cmd, Resp]()
			##
			Cmd ? cmd [[isGetVar(cmd), not(isValidVariable(variable(cmd))), isS_As_Closed(s)]] >-> Resp ! NoSuchVariable  >-> Acc_Closed[Cmd, Resp]()
			##
			Cmd ? cmd [[isGetVar(cmd), not(isValidVariable(variable(cmd))), isS_As_Ending(s)]] >-> Resp ! NoSuchVariable  >-> Acc_Ending[Cmd, Resp]()
ENDDEF

-- ----------------------------------------------------- --

MODELDEF  Mod
 ::=
     CHAN IN    In
     CHAN OUT   Out

     BEHAVIOUR  
              Greeting [In, Out] ()
ENDDEF

-- ----------------------------------------------------- --

CNECTDEF  Sut
 ::=
     CLIENTSOCK

     CHAN OUT  In          HOST "sid.cs.ru.nl"  PORT 25999
     ENCODE    In ? cmd      ->  !  cmdToString(cmd)

     CHAN IN   Out          HOST "sid.cs.ru.nl"  PORT 25999
     DECODE   Out ! stringToResponse(s)   <-   ? s
ENDDEF

-- ----------------------------------------------------- --

